{"version":3,"sources":["components/VideoCanvas.tsx","components/FilePicker.tsx","utilities/data.ts","utilities/shapes.ts","utilities/area.ts","utilities/types.ts","components/ToolSelector.tsx","components/Canvas.tsx","components/Inspector.tsx","components/IOManager.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["VideoCanvas","source","setVideo","setSlider","value","videoRef","useRef","useEffect","current","src","currentTime","className","type","min","max","onChange","ev","percentage","duration","setVideoPos","target","ref","hidden","FilePicker","setFile","accept_types","accept","_","files","item","order","s","ol","sort","a","b","tmp","isPointInShape","p","res","i","length","edge","distancePointToPoint","Math","hypot","dot","vec1","vec2","vecSum","v1","v2","vecSub","v","vecMul","n","Tool","Area","quad","direction","id","shape","isCarWalkable","isParking","stop","isSelected","this","newId","points","dir","lu","ru","rb","lb","carWalk","left","up","right","down","parking","ad","Object","values","dirs","entries","map","k","reduce","vec","counter","ToolSelector","onSelect","onAdd","SELECT","onClick","ADD","Canvas","img","quads","newQuad","tool","setSelected","moveSelected","deleteSelected","slider","useState","setPoints","dragging","setDragging","oldMouse","setOldMouse","mouse","useMouse","canvas","context","getContext","drawImage","fillStyle","fillRect","width","height","movement","x","y","strokeStyle","drawPath","close","path","snapToShapes","pos","shapes","dist","point","p1","d","p2","proj","l","lineVec","lineLen","lineVecNormalized","pointProjLen","projectPointToSegment","d1","d2","minDist","newPoint","canvasCtx","f_drawPoints","moveTo","beginPath","lineTo","closePath","stroke","drawPoint","arc","fill","handleSelect","findPointIndexInShape","onMouseDown","updatedShape","newArea","addPoint","Error","onMouseUp","onMouseLeave","Inspector","update","inspected","setInspected","updateInspected","updated","changed","unchanged","filter","renderAD","renderedPoints","flatMap","key","val","round","e","renderedDirection","checked","find","t","fromAreaDictionary","toAreaDictionary","selected","list","pending","console","log","fields","IOManager","dlRef","filename","replace","formatData","formatted","formatArea","join","concat","area","outStr","blob","Blob","dlUrl","URL","createObjectURL","setAttribute","click","revokeObjectURL","download","App","file","videoSrc","setVideoSrc","video","quadList","setQuadList","setTool","index","updateQuads","notUpdated","filteredList","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff943b73.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Shape } from '../utilities/types';\nimport Canvas, { CanvasProps } from './Canvas';\n\nimport './VideoCanvas.css';\n\ntype VideoCanvasProps = {\n    source: string;\n    setVideo: (video: HTMLVideoElement) => void;\n    setSlider: (value: number | undefined) => void;\n    value: number;\n};\n\nexport default function VideoCanvas({ source, setVideo, setSlider, value }: VideoCanvasProps) {\n\n    const videoRef = useRef<HTMLVideoElement>(null);\n\n\n    useEffect(() => {\n        if (videoRef.current && source) {\n            videoRef.current.src = source;\n            videoRef.current.currentTime = 0;\n            setVideo(videoRef.current);\n        }\n    }, [source]);\n\n    const setVideoPos = (percentage: number) => {\n        if (!videoRef.current || !source || !percentage) {\n            return;\n        }\n        // force range 0 - 100\n        const value = percentage < 0 ? 0 : percentage > 100 ? 100 : percentage;\n        videoRef.current.currentTime = value / 100 * videoRef.current.duration;\n        setSlider(value);\n    };\n\n    return (\n        <div className=\"VideoCanvas\">\n            <input className=\"slider\"\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={value}\n                onChange={ev => { setVideoPos(+ev.target.value); }}\n            />\n            <video ref={videoRef} hidden />\n        </div>\n    );\n}\n","import React, { useRef, useEffect, useState } from 'react';\n\nimport './FilePicker.css';\n\ntype FilePickerProps = {\n    setFile: (f: File | null) => void,\n    accept_types?: string;\n};\n\nfunction FilePicker({ setFile, accept_types = \"\" }: FilePickerProps) {\n\n    const ref = useRef<HTMLInputElement>(null);\n\n    return (\n        <div className=\"FilePicker\">\n            <input\n                ref={ref}\n                type=\"file\"\n                accept={accept_types}\n                onChange={_ => setFile(ref.current?.files?.item(0) ?? null)}\n            />\n        </div>\n    );\n}\n\nexport default FilePicker;","import { Shape } from './types';\n\nexport function order(s: Shape) {\n    const X = 0;\n    const Y = 1;\n\n    // sort up first\n    let ol = s.sort((a, b) => a[Y] < b[Y] ? -1 : 1);\n\n    if (ol[0][X] > ol[1][X]) {\n        const tmp = ol[0];\n        ol[0] = ol[1];\n        ol[1] = tmp;\n    }\n    if (ol[2][X] < ol[3][X]) {\n        const tmp = ol[2];\n        ol[2] = ol[3];\n        ol[3] = tmp;\n    }\n    return ol;\n}","import { Point, Shape } from './types';\n\nexport function findPointIndexInShape(target: Point, shapes: Shape[]) {\n    for (let i = 0; i < shapes.length; i++) {\n        if (isPointInShape(target, shapes[i])) return i;\n    }\n    return -1;\n}\n\nexport function isPointInShape(p: Point, s: Shape) {\n    let res = false;\n    const X = 0;\n    const Y = 1;\n    for (let i = 0; i < s.length; i++) {\n        // https://www.eecs.umich.edu/courses/eecs380/HANDOUTS/PROJ2/InsidePoly.html\n        const edge = [s[i], s[(i + 1) % s.length]];\n        if (\n            (   // is the point in the Y range of the edge?\n                edge[0][Y] <= p[Y] && edge[1][Y] >= p[Y] ||\n                edge[1][Y] <= p[Y] && edge[0][Y] >= p[Y]\n            )\n            &&\n            (   // is our point to the left the line that our edge sits on at Y = point[Y]?\n                p[X] < (edge[0][X] - edge[1][X]) * (p[Y] - edge[1][Y]) / (edge[0][Y] - edge[1][Y]) + edge[1][X]\n            )\n        ) {\n            res = !res;\n        }\n    }\n    return res;\n}\n\nexport function distancePointToPoint(a: Point, b: Point) {\n    // Pitagora\n    return Math.hypot(a[0] - b[0], a[1] - b[1]);\n}\n\nfunction badProjectPointToSegment(p: Point, l: [Point, Point]) {\n    // WHY DID I EVEN BOTHER WITH ALL OF THIS MATH\n    const [x, y] = [p[0], p[1]];\n    const [x1, y1] = [l[0][0], l[0][1]];\n    const [x2, y2] = [l[1][0], l[1][1]];\n\n    // find m and q of the segment line\n    const m = (y1 - y2) / (x1 - x2);\n    const q = (x1 * y2 - x2 * y1) / (x1 - x2);\n\n    // find m and q of the projection line\n    const mproj = -1 / m;\n    const qproj = y - mproj * x;\n\n    // solve the system and find the point that sits on both lines\n    const xproj = (qproj - q) / (m - mproj);\n    const yproj = m * xproj + q;\n\n    const proj = [xproj, yproj] as Point;\n\n    if (\n        proj[0] > l[0][0] && proj[0] > l[1][0] || // too far left\n        proj[0] < l[0][0] && proj[0] < l[1][0] || // too far right\n        proj[1] > l[0][1] && proj[1] > l[1][1] || // too far up\n        proj[1] < l[0][1] && proj[1] < l[1][1]    // too far down\n    ) {\n        return null;\n    }\n    return proj;\n}\n\nexport function projectPointToSegment(p: Point, l: [Point, Point]): Point | null {\n    // WHY DO I ONLY THINK OF VECTORS IN MY FREE TIME AND NOT WHEN I'M ON THE CLOCK??????\n    const lineVec = vecSub(l[1], l[0]);\n    const lineLen = distancePointToPoint(l[0], l[1]);\n    const lineVecNormalized = vecMul(lineVec, 1 / lineLen);\n    const pointProjLen = dot(vecSub(p, l[0]), lineVecNormalized);\n    if (pointProjLen < 0 || pointProjLen > lineLen) return null; // proj outside the segment\n    const pointProj = vecSum(l[0], vecMul(lineVecNormalized, pointProjLen));\n    return pointProj;\n}\n\nexport function dot(vec1: Point, vec2: Point) {\n    return vec1[0] * vec2[0] + vec1[1] * vec2[1];\n}\n\nexport function vecSum(v1: Point, v2: Point): Point {\n    return [v1[0] + v2[0], v1[1] + v2[1]];\n}\n\nexport function vecNegative(v: Point): Point {\n    return [-v[0], -v[1]];\n}\n\nexport function vecSub(v1: Point, v2: Point): Point {\n    return vecSum(v1, vecNegative(v2));\n}\n\nexport function vecMul(v: Point, n: number): Point {\n    return [v[0] * n, v[1] * n];\n}","import { order } from './data';\nimport { dot, vecSum } from './shapes';\nimport { AreaDictionary, IIndexable, Point, Shape } from './types';\n\nexport class Area {\n    private static counter = 0;\n\n    readonly id: number;\n    public shape: Shape;\n    public isCarWalkable = true;\n    public direction: Point | null = null;\n    public isParking = false;\n    public stop: string | null = null;\n    public isSelected = false;\n\n    constructor(quad: Shape, direction?: Point) {\n        this.id = Area.newId();\n        this.shape = quad;\n        if (direction) this.direction = direction;\n    }\n\n    static newId() {\n        return Area.counter++;\n    }\n\n    toAreaDictionary(): AreaDictionary {\n        const points = order(this.shape);\n        const dir = this.direction ?? [0, 0];\n        return {\n            id: this.id,\n            points: {\n                lu: [...points[0]],\n                ru: [...points[1]],\n                rb: [...points[2]],\n                lb: [...points[3]],\n            },\n            carWalk: this.isCarWalkable,\n            dir: {\n                left: dot(dir, [-1, 0]) > .25 ? true : false,\n                up: dot(dir, [0, -1]) > .25 ? true : false,\n                right: dot(dir, [1, 0]) > .25 ? true : false,\n                down: dot(dir, [0, 1]) > .25 ? true : false,\n            },\n            parking: this.isParking,\n            stop: `${this.stop ?? \"None\"}`,\n        };\n    }\n\n    fromAreaDictionary(ad: AreaDictionary) {\n        this.shape = Object.values(ad.points);\n        this.isCarWalkable = ad.carWalk;\n        const dirs = {\n            left: [-1, 0],\n            right: [1, 0],\n            up: [0, -1],\n            down: [0, 1],\n        };\n        this.direction = Object.entries(ad.dir)\n            .map(([k, v]) => v ? (dirs as IIndexable)[k] : [0, 0])\n            .reduce((res, vec) => vecSum(res, vec));\n\n        this.isParking = ad.parking;\n        this.stop = ad.stop;\n        return this;\n    }\n}","export type Point = [number, number];\nexport type Shape = Point[];\nexport enum Tool { ADD, SELECT };\n\nexport type AreaDictionary = {\n    id: number;\n    points: {\n        lu: Point;\n        ru: Point;\n        rb: Point;\n        lb: Point;\n    };\n    carWalk: boolean;\n    dir: {\n        left: boolean;\n        up: boolean;\n        right: boolean;\n        down: boolean;\n    };\n    parking: boolean;\n    stop: string;\n    changed?: boolean;\n};\n\nexport interface IIndexable<T = any> { [key: string]: T; }\n\nexport { Area } from \"./area\";","import React from 'react';\nimport { Tool } from '../utilities/types';\nimport './ToolSelector.css';\n\ntype ToolSelectorProps = {\n    value?: Tool;\n    onSelect?: () => void;\n    onAdd?: () => void;\n};\n\nexport default function ToolSelector({ value, onSelect, onAdd }: ToolSelectorProps) {\n    return (\n        <div className=\"ToolSelector\">\n            <button\n                className={value === Tool.SELECT ? \"active\" : \"\"}\n                onClick={onSelect}\n            >\n                SELECT\n                \n            </button>\n\n            <button\n                className={value === Tool.ADD ? \"active\" : \"\"}\n                onClick={onAdd}\n            >\n                ADD\n\n            </button>\n        </div>\n    );\n}","import React, { useRef, useState, useEffect, ComponentProps } from 'react';\nimport useMouse from '@react-hook/mouse-position';\nimport './Canvas.css';\nimport { Area, Point, Shape, Tool } from '../utilities/types';\nimport { distancePointToPoint, projectPointToSegment, findPointIndexInShape, vecSum } from '../utilities/shapes';\n\nconst CANVAS_W = 1280;\nconst CANVAS_H = 720;\nconst POINT_RADIUS = 5;\nconst SNAP_DISTANCE = 50;\n\nexport interface CanvasProps {\n    img: CanvasImageSource | null;\n    quads: Area[];\n    newQuad: (quad: Area) => void;\n    tool: Tool;\n    setSelected: (index: number) => void;\n    moveSelected: (vector: Point) => void;\n    deleteSelected: () => void;\n    slider?: number;\n};\n\nexport default function Canvas({\n    img, quads, newQuad,\n    tool, setSelected,\n    moveSelected, deleteSelected, slider,\n}: CanvasProps) {\n\n    const [points, setPoints] = useState<Shape>([]);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const [oldMouse, setOldMouse] = useState<Point | null>(null);\n\n    const ref = useRef<HTMLCanvasElement>(null);\n    const mouse = useMouse(ref);\n\n    useEffect(() => {\n        const canvas = ref.current;\n        const context = canvas?.getContext('2d');\n        if (!canvas || !context) {\n            return;\n        }\n\n        // Background\n        if (img) {\n            context.drawImage(img, 0, 0, CANVAS_W, CANVAS_H);\n        } else {\n            context.fillStyle = '#fff';\n            context.fillRect(0, 0, canvas.width, canvas.height);\n        }\n\n        let movement: Point = [0, 0];\n        // Drag\n        if (dragging && oldMouse) {\n            movement = [mouse.x! - oldMouse[0], mouse.y! - oldMouse[1]] as Point;\n        }\n\n        // Finished Quads\n        for (const quad of quads) {\n            if (quad.isSelected) {\n                context.strokeStyle = '#ff0';\n                context.fillStyle = '#0ff';\n                drawPath(context, quad.shape.map(p => vecSum(p, movement)), true);\n            } else {\n                context.strokeStyle = '#f00';\n                context.fillStyle = '#00f';\n                drawPath(context, quad.shape, true);\n            }\n        }\n\n        if (mouse.x && mouse.y) {\n\n            // New Quad\n            if (points && tool === Tool.ADD) {\n                let close = false;\n                const pos = snapToShapes([mouse.x, mouse.y], quads.map(a => a.shape));\n                let path = [pos, ...points];\n                if (points.length === 3) {\n                    close = true;\n                }\n                context.strokeStyle = '#f00';\n                context.fillStyle = '#00f';\n                drawPath(context, path, true, close);\n            }\n\n\n        }\n    }, [img, quads, tool, mouse, points, slider]);\n\n    const snapToShapes = (pos: Point, shapes: Shape[]) => {\n        let [minDist, newPoint] = shapes.reduce(([dist, point]: [number, Point | null], s) => {\n\n            // find the most close point in each shape with his distance\n            let [d, p] = s.reduce(([dist, point]: [number, Point | null], p1, i, s) => {\n\n                const p2 = s[(i + 1) % s.length];\n                let proj = projectPointToSegment(pos, [p1, p2]);\n                let d, p;\n                // if we found a projection it is the closest point\n                if (proj) {\n                    d = distancePointToPoint(pos, proj);\n                    p = proj;\n                }\n                // otherwise check wich end of the segment is the closest and pick that one\n                else {\n                    const d1 = distancePointToPoint(pos, p1);\n                    const d2 = distancePointToPoint(pos, p2);\n                    [d, p] = d1 < d2 ? [d1, [...p1] as Point] : [d2, [...p2] as Point]; // ... to force copy\n                }\n\n                // confront it with the previous results\n                if (d < dist || dist === -1) return [d, p];\n                else return [dist, point];\n            }, [-1, null]);\n\n            // confront it with the previous results\n            if (d < dist || dist === -1) return [d, p];\n            else return [dist, point];\n        }, [-1, null]);\n\n        if (newPoint && minDist < SNAP_DISTANCE) {\n            pos = newPoint;\n        }\n        return pos;\n    };\n\n    const addPoint = () => {\n        if (!mouse.x || !mouse.y) {\n            return;\n        }\n\n        let pos: Point = [mouse.x, mouse.y];\n\n        pos = snapToShapes(pos, quads.map(a => a.shape));\n\n        const updatedShape = [pos, ...points];\n\n        if (updatedShape.length === 4) {\n            const newArea = new Area(updatedShape);\n            newArea.isSelected = true;\n            setSelected(-1);\n            newQuad(newArea);\n            setPoints([]);\n        } else {\n            setPoints(updatedShape);\n        }\n    };\n\n    const drawPath = (canvasCtx: CanvasRenderingContext2D, points: [number, number][], f_drawPoints = false, close = true) => {\n        if (points[0])\n            canvasCtx.moveTo(points[0][0], points[0][1]);\n        canvasCtx.beginPath();\n        for (const p of points) {\n            canvasCtx.lineTo(p[0], p[1]);\n        }\n\n        if (close)\n            canvasCtx.closePath();\n\n        canvasCtx.stroke();\n\n        if (f_drawPoints) {\n            for (const p of points)\n                drawPoint(canvasCtx, p);\n        }\n    };\n\n    const drawPoint = (canvasCtx: CanvasRenderingContext2D, point: Point) => {\n        canvasCtx.beginPath();\n        canvasCtx.arc(point[0], point[1], POINT_RADIUS, 0, 2 * 3.15);\n        canvasCtx.closePath();\n        canvasCtx.fill();\n    };\n\n    const handleSelect = () => {\n        const target = findPointIndexInShape([mouse.x, mouse.y] as Point, quads.map(a => a.shape));\n        if (target >= 0 && quads[target].isSelected) {\n            setDragging(true);\n            setOldMouse([mouse.x!, mouse.y!]);\n        } else {\n            setSelected(target);\n        }\n    };\n\n    const onMouseDown = () => {\n        switch (tool) {\n            case Tool.ADD:\n                addPoint();\n                break;\n            case Tool.SELECT:\n                handleSelect();\n                break;\n            default:\n                throw Error(\"No tool selected???\");\n        }\n    };\n    const onMouseUp = () => {\n        if (dragging && oldMouse) {\n            moveSelected([mouse.x! - oldMouse[0], mouse.y! - oldMouse[1]]);\n            setDragging(false);\n            setOldMouse(null);\n        }\n    };\n    const onMouseLeave = () => {\n        setPoints([]);\n        if (dragging) {\n            setDragging(false);\n            setOldMouse(null);\n            deleteSelected();\n        }\n    };\n\n    return (\n        <div className=\"Canvas\">\n            <canvas\n                ref={ref}\n                onMouseDown={onMouseDown}\n                onMouseUp={onMouseUp}\n                onMouseLeave={onMouseLeave}\n                width={CANVAS_W}\n                height={CANVAS_H}\n            />\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { order } from '../utilities/data';\nimport { dot, vecSum } from '../utilities/shapes';\nimport { Area, AreaDictionary, IIndexable, Point } from '../utilities/types';\n\nimport './Inspector.scss';\n\ntype InspectorProps = {\n    target: Area[];\n    update: (updated: Area[]) => void;\n};\n\nexport default function Inspector({ target, update }: InspectorProps) {\n\n    const [inspected, setInspected] = useState<AreaDictionary[]>();\n    const updateInspected = (updated: AreaDictionary, changed = true) => {\n        updated.changed = changed;\n        if (!inspected) return;\n        const unchanged = inspected?.filter(a => a.id !== updated.id);\n        setInspected([updated, ...unchanged].sort((a, b) => a.id < b.id ? -1 : 1));\n    };\n\n    useEffect(() => {\n        let selected: Area[] = target.filter(a => a.isSelected);\n        if (selected.length === 0)\n            selected = target;\n\n        let list = selected.map(a => a.toAreaDictionary());\n\n        const pending = inspected?.filter(t => t.changed);\n        list = list.map(a => {\n            const t = pending?.find(t => t.id === a.id);\n            return t ? t : a;\n        });\n\n        list = list.sort((a, b) => a.id < b.id ? -1 : 1);\n\n        setInspected(list);\n    }, [target]);\n\n    useEffect(() => { console.log(inspected); }, [inspected]);\n\n\n    function renderAD(a: AreaDictionary) {\n\n        const renderPoint = (p: Point, key: string, ref: AreaDictionary) => {\n            return p.map((val, i) => {\n                return (\n                    <td key={`${key}${i}`}>\n                        <input className=\"simple\"\n                            type=\"number\"\n                            value={Math.round(val)}\n                            onChange={e => {\n                                (ref.points as IIndexable)[key][i] = +e.target.value;\n                                updateInspected(ref);\n                            }}\n                        />\n                    </td>\n                );\n            });\n        };\n\n        const renderedPoints = Object.entries(a.points)\n            .flatMap(([k, v]) => renderPoint(v, k, a));\n\n        const renderedDirection = Object.entries(a.dir)\n            .map(([k, v]) => {\n                return (\n                    <td key={k}>\n                        <input className=\"simple\"\n                            type=\"number\"\n                            value={v ? 1 : 0}\n                            onChange={e => {\n                                (a.dir as IIndexable)[k] = +e.target.value > 0;\n                                updateInspected(a);\n                            }}\n                        />\n                    </td>\n                );\n            });\n\n        return (\n            <tr key={a.id}>\n                {renderedPoints}\n                <td key=\"iscarwalkable\">\n                    <input type=\"checkbox\"\n                        checked={a.carWalk}\n                        onChange={() => {\n                            a.carWalk = !a.carWalk;\n                            updateInspected(a);\n                        }}\n                    />\n                </td>\n                {renderedDirection}\n                <td key=\"isparking\">\n                    <input type=\"checkbox\"\n                        checked={a.parking}\n                        onChange={() => {\n                            a.parking = !a.parking;\n                            updateInspected(a);\n                        }}\n                    />\n                </td>\n                <td key=\"isstop\">\n                    <input className=\"simple\"\n                        type=\"text\"\n                        value={a.stop ?? \"None\"}\n                        onChange={e => {\n                            a.stop = e.target.value;\n                            updateInspected(a);\n                        }}\n                    />\n                </td>\n                <td key=\"update\">\n                    <button\n                        hidden={!a.changed}\n                        onClick={() => {\n                            updateInspected(a, false);\n                            update([\n                                target.find(t => t.id === a.id)!.fromAreaDictionary(a)\n                            ]);\n                        }}\n                    >\n                        update\n                    </button>\n                </td>\n                <td key=\"discard\">\n                    <button\n                        hidden={!a.changed}\n                        onClick={() => {\n                            a = target.find(t => t.id === a.id)!.toAreaDictionary();\n                            updateInspected(a, false);\n                        }}\n                    >\n                        discard\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n\n    return (\n        <div className=\"Inspector\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>luX     </th>\n                        <th>luY     </th>\n                        <th>ruX     </th>\n                        <th>ruY     </th>\n                        <th>rbX     </th>\n                        <th>rbY     </th>\n                        <th>lbX     </th>\n                        <th>lbY     </th>\n                        <th>CarWalk </th>\n                        <th>Left    </th>\n                        <th>Up      </th>\n                        <th>Right   </th>\n                        <th>Down    </th>\n                        <th>Parking </th>\n                        <th>Stop    </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        inspected?.map((a) => renderAD(a))\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n\n}","import React, { useRef, useState } from 'react';\nimport { order } from '../utilities/data';\nimport { dot } from '../utilities/shapes';\nimport { Area, Point } from '../utilities/types';\n\nimport './IOManager.css';\n\nconst fields = [\n    \"luX\",\n    \"luY\",\n    \"ruX\",\n    \"ruY\",\n    \"rbX\",\n    \"rbY\",\n    \"lbX\",\n    \"lbY\",\n    \"CarWalk\",\n    \"Left\",\n    \"Up\",\n    \"Right\",\n    \"Down\",\n    \"Parking\",\n    \"Stop\",\n];\n\ntype IOMangerProps = {\n    target: Area[];\n    source?: string;\n};\n\nexport function IOManager({ target, source }: IOMangerProps) {\n    const dlRef = useRef<HTMLAnchorElement>(null);\n\n    const filename = source ? source.replace(\".mp4\", \"_areas.csv\") : \"areas.csv\";\n\n    const download = () => {\n        const outStr = formatData(target);\n        const blob = new Blob([outStr], { type: 'text/csv;charset=utf-8;' });\n        const dlUrl = URL.createObjectURL(blob);\n        dlRef.current?.setAttribute(\"href\", dlUrl);\n        dlRef.current?.click();\n        URL.revokeObjectURL(dlUrl);\n    };\n\n    const formatData = (target: Area[]) => {\n        const formatted = target.map(formatArea);\n        return [fields.join(',')].concat(formatted).join('\\n');\n    };\n\n    const formatArea = (area: Area) => {\n        const points = order(area.shape)\n            .map(p => [\n                Math.round(p[0]),\n                Math.round(p[1])\n            ].join(','))\n            .join(',');\n\n        const carWalk = area.isCarWalkable ? \"1\" : \"0\";\n\n        const dir: Point = area.direction ? area.direction : [0, 0];\n        const direction = [\n            dot(dir, [-1, 0]) > .25 ? \"1\" : \"0\",\n            dot(dir, [0, -1]) > .25 ? \"1\" : \"0\",\n            dot(dir, [1, 0]) > .25 ? \"1\" : \"0\",\n            dot(dir, [0, 1]) > .25 ? \"1\" : \"0\",\n        ].join(',');\n\n        const parking = area.isCarWalkable ? \"1\" : \"0\";\n        const stop = area.stop ? \"\" + area.stop : \"None\";\n\n        return [points, carWalk, direction, parking, stop].join(',');\n    };\n\n    return (\n        <div className=\"IOManager\">\n            <button\n                onClick={download}\n            >\n                Download\n            </button>\n            <a\n                ref={dlRef}\n                download={filename}\n                hidden\n            />\n        </div>\n    );\n}","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport VideoCanvas from './components/VideoCanvas';\nimport FilePicker from './components/FilePicker';\nimport { Area, Point, Shape, Tool } from './utilities/types';\nimport ToolSelector from './components/ToolSelector';\nimport Canvas from './components/Canvas';\nimport Inspector from './components/Inspector';\nimport { IOManager } from './components/IOManager';\n\n\nexport default function App() {\n\n    const [file, setFile] = useState<File | null>(null);\n    const [videoSrc, setVideoSrc] = useState<string>(\"\");\n    const [video, setVideo] = useState<HTMLVideoElement | null>(null);\n    const [slider, setSlider] = useState<number | undefined>();\n    const [quadList, setQuadList] = useState<Area[]>([]);\n    const [tool, setTool] = useState<Tool>(Tool.ADD);\n\n    useEffect(() => {\n        if (file) {\n            const source = URL.createObjectURL(file);\n            setVideoSrc(source);\n        }\n    }, [file]);\n\n    const moveSelected = (vec: Point) => {\n        // get the selected areas\n        const selected = quadList.filter(a => a.isSelected);\n        // add the vector to the points of the selected areas\n        selected.map(a => {\n            for (const p of a.shape) {\n                p[0] += vec[0];\n                p[1] += vec[1];\n            }\n        });\n        updateQuads(selected);\n    };\n\n    const deleteSelected = () => {\n        const filteredList = quadList.filter(a => !a.isSelected);\n        setQuadList(filteredList);\n    };\n\n    const setSelected = (index: number) => {\n        quadList.map(a => a.isSelected = false);\n        if (index >= 0 && index < quadList.length) {\n            quadList[index].isSelected = true;\n        }\n        setQuadList([...quadList]);\n    };\n\n    const updateQuads = (quads: Area[]) => {\n        const notUpdated = quadList.filter(a => {\n            for (const b of quads) {\n                if (a.id === b.id)\n                    return false;\n            }\n            return true;\n        });\n        setQuadList([...quads, ...notUpdated]);\n    };\n\n    return (\n        <div className=\"App\">\n            <Canvas\n                img={video}\n                quads={quadList}\n                newQuad={(quad: Area) => setQuadList([quad, ...quadList])}\n                tool={tool}\n                setSelected={setSelected}\n                moveSelected={moveSelected}\n                deleteSelected={deleteSelected}\n                slider={slider}\n            />\n            <VideoCanvas\n                source={videoSrc}\n                setVideo={setVideo}\n                setSlider={setSlider}\n                value={slider ?? 0}\n            />\n            <FilePicker setFile={setFile} accept_types=\"video/*\" />\n            <ToolSelector\n                value={tool}\n                onAdd={() => { setTool(Tool.ADD); setSelected(-1); }}\n                onSelect={() => { setTool(Tool.SELECT); setSelected(-1); }}\n            />\n            <Inspector\n                target={quadList}\n                update={updateQuads}\n            />\n            <IOManager\n                target={quadList}\n                source={file?.name}\n            />\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}