{"version":3,"sources":["components/Video.tsx","components/FilePicker.tsx","utilities/data.ts","utilities/area.ts","utilities/types.ts","components/ToolSelector.tsx","utilities/shapes.ts","components/Canvas.tsx","components/Inspector.tsx","components/IOManager.tsx","components/OptionSelector.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Video","source","setVideo","setSlider","videoRef","value","useRef","useEffect","current","src","loader","setTimeout","duration","setVideoPos","percentage","currentTime","className","type","min","max","onChange","ev","target","ref","hidden","FilePicker","setFile","accept_types","Button","variant","color","onClick","click","accept","_","files","item","order","s","lu","sort","a","b","slice","i_lu","findIndex","p","ordered","nextP","length","prevP","i","push","Tool","Area","quad","id","shape","isCarWalkable","direction","left","up","right","down","isParking","stop","isSelected","this","newId","points","map","x","Math","round","ru","rb","lb","carWalk","dir","parking","ad","Object","values","counter","ToolSelector","onSelect","onAdd","onSetDirections","ADD","SELECT","SET_DIRECTIONS","isPointInShape","res","edge","distancePointToPoint","hypot","projectPointToSegment","l","vec1","vec2","lineVec","vecSub","lineLen","lineVecNormalized","vecScale","pointProjLen","vecSum","v1","v2","vecNegative","v","n","vecRotate","upRotated","vecLen","vecFromCoordinateSystem","centroidOfShape","reduce","alpha","style1","width","stroke","fill","arrow","selected","style2","Canvas","img","quads","newQuad","tool","setSelected","updateQuads","deleteQuads","slider","height","options","ids","arrows","useState","setPoints","dragging","setDragging","modifier","setModifier","oldMouse","setOldMouse","dragIndexes","setDragIndexes","y","mouse","setMouse","canvasH","canvasW","canvas","context","getContext","Error","drawImage","e","fillStyle","fillRect","drawArea","close","path","snapToShapes","lineWidth","strokeStyle","drawPath","pos","shapes","flat","dist","point","d","minDist","newPoint","p1","p2","proj","canvasCtx","f_drawPoints","moveTo","beginPath","lineTo","closePath","drawPoint","tmpFill","tmpStroke","arc","drawArrows","directions","f_close","vec","topMid","botMid","rightMid","leftMid","entries","anchor","k","rotated","translation","tmpWidth","area","movement","style","some","filter","center","tmp","lw","ss","fs","drawText","toString","drawParking","text","size","font","ta","textAlign","tb","textBaseline","fillText","handleSelect","find","indexes","distance","res_d","res_i","res_is","j","findPointInShapeIndex","stopDragging","selectedAreas","updated","onMouseDown","updatedShape","newArea","addPoint","targetArea","q","sectors","selectedDir","handleSetDirections","onMouseUp","onMouseLeave","onMouseMove","ratio","clientWidth","topLeft","offsetLeft","offsetTop","pageX","pageY","onKeyDown","key","onKeyUp","tabIndex","Inspector","update","selectById","deleteById","inspected","setInspected","updateInspected","changed","unchanged","renderAD","renderedPoints","flatMap","val","renderedDirection","checked","stopPropagation","Delete","t","fromAreaDictionary","Check","toAreaDictionary","Clear","list","pending","fields","IOManager","load","dlRef","loadRef","filename","replace","formatData","formatted","formatArea","join","concat","f","console","error","csv","rows","split","strings","r","dictionaries","vals","newAreas","outStr","blob","Blob","dlUrl","URL","createObjectURL","setAttribute","revokeObjectURL","download","OptionSelector","updateOptions","ArrowUpward","App","file","videoSrc","setVideoSrc","video","quadList","setQuadList","setTool","setOptions","filteredList","every","index","notUpdated","videoWidth","undefined","videoHeight","name","arr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","primary","main","blue","secondary","red","typography","button","fontWeight","overrides","MuiButton","outlined","border","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.68439861.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport './Video.css';\n\ntype VideoProps = {\n    source: string;\n    setVideo: (video: HTMLVideoElement) => void;\n    setSlider: (value: number | undefined) => void;\n    value: number;\n};\n\nexport default function Video({ source, setVideo, setSlider, value }: VideoProps) {\n\n    const videoRef = useRef<HTMLVideoElement>(null);\n\n    useEffect(() => {\n        if (videoRef.current && source) {\n            videoRef.current.src = source;\n            setVideo(videoRef.current);\n\n            const loader = () => {\n                setTimeout(() => {\n                    if (videoRef.current?.duration) {\n                        setVideoPos(1);\n                    } else loader();\n                }, 10);\n            };\n\n            loader();\n        }\n    }, [source]);\n\n    const setVideoPos = (percentage: number) => {\n        if (!videoRef.current || !source || !percentage) {\n            return;\n        }\n        // force range 0 - 100\n        const value = percentage < 1 ? 1 : percentage > 100 ? 100 : percentage;\n        videoRef.current.currentTime = value / 100 * videoRef.current.duration;\n        setSlider(value);\n    };\n\n    return (\n        <div className=\"VideoCanvas\">\n            <input className=\"slider\"\n                type=\"range\"\n                min=\"1\"\n                max=\"100\"\n                onChange={ev => { setVideoPos(+ev.target.value); }}\n            />\n            <video ref={videoRef} hidden />\n        </div>\n    );\n}\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\n\nimport './FilePicker.css';\n\ntype FilePickerProps = {\n    setFile: (f: File | null) => void,\n    accept_types?: string;\n};\n\nfunction FilePicker({ setFile, accept_types = \"\" }: FilePickerProps) {\n\n    const ref = useRef<HTMLInputElement>(null);\n\n    return (\n        <div className=\"FilePicker\">\n            <Button variant=\"contained\" color=\"primary\"\n                onClick={() => ref.current?.click()}\n            >\n                Select Video\n            </Button>\n            <input hidden\n                ref={ref}\n                type=\"file\"\n                accept={accept_types}\n                onChange={_ => setFile(ref.current?.files?.item(0) ?? null)}\n            />\n        </div>\n    );\n}\n\nexport default FilePicker;","import { Shape } from './types';\n\nexport function order(s: Shape) {\n    const X = 0;\n    const Y = 1;\n\n    let lu = [...s].sort((a, b) => a[Y] < b[Y] ? -1 : 1).slice(0, 2).sort((a, b) => a[X] < b[X] ? -1 : 1)[0];\n    let i_lu = s.findIndex(p => p === lu);\n\n    const ordered: Shape = [];\n    const nextP = s[(i_lu + 1) % s.length];\n    const prevP = s[(i_lu + s.length - 1) % s.length];\n\n    if (nextP[Y] < prevP[Y]) {\n        for (let i = 0; i < s.length; i++) {\n            const p = s[(i_lu + i) % s.length];\n            ordered.push([...p]);\n        }\n    } else {\n        for (let i = 0; i < s.length; i++) {\n            const p = s[(i_lu + s.length - i) % s.length];\n            ordered.push([...p]);\n        }\n    }\n\n    return ordered; // force copy;\n}","import { order } from './data';\nimport { dot, vecSum } from './shapes';\nimport { AreaDictionary, IIndexable, Vector, Shape } from './types';\n\nexport class Area {\n    private static counter = 0;\n\n    readonly id: number;\n    public shape: Shape;\n    public isCarWalkable = true;\n    public direction = {\n        left: true,\n        up: true,\n        right: true,\n        down: true,\n    };\n    public isParking = false;\n    public stop: string | null = null;\n    public isSelected = false;\n\n    constructor(quad?: Shape) {\n        this.id = Area.newId();\n        this.shape = quad ?? [[-1, -1], [-1, -1], [-1, -1], [-1, -1]];\n    }\n\n    static newId() {\n        return Area.counter++;\n    }\n\n    toAreaDictionary(): AreaDictionary {\n        const points = order(this.shape);\n        const dir = this.direction ?? [0, 0];\n        return {\n            id: this.id,\n            points: {\n                lu: points[0].map(x => Math.round(x)) as Vector,\n                ru: points[1].map(x => Math.round(x)) as Vector,\n                rb: points[2].map(x => Math.round(x)) as Vector,\n                lb: points[3].map(x => Math.round(x)) as Vector,\n            },\n            carWalk: this.isCarWalkable,\n            dir: { ...this.direction },\n            parking: this.isParking,\n            stop: `${this.stop ?? \"None\"}`,\n            ref: this,\n        };\n    }\n\n    fromAreaDictionary(ad: AreaDictionary) {\n        this.shape = Object.values(ad.points);\n        this.isCarWalkable = ad.carWalk;\n        const dirs = {\n            left: [-1, 0],\n            right: [1, 0],\n            up: [0, 1],\n            down: [0, -1],\n        };\n        this.direction = { ...ad.dir };\n\n        this.isParking = ad.parking;\n        this.stop = ad.stop;\n        ad.ref = this;\n        return this;\n    }\n}","import { Area } from \"./area\";\n\nexport type Vector = [number, number];\nexport type Shape = Vector[];\nexport enum Tool { ADD, SELECT, SET_DIRECTIONS };\n\nexport type DirKeys = \"left\" | \"right\" | \"up\" | \"down\";\n\nexport type AreaDictionary = {\n    id: number;\n    points: {\n        lu: Vector;\n        ru: Vector;\n        rb: Vector;\n        lb: Vector;\n    };\n    carWalk: boolean;\n    dir: {\n        left: boolean;\n        up: boolean;\n        right: boolean;\n        down: boolean;\n    };\n    parking: boolean;\n    stop: string;\n    changed?: boolean;\n    ref?: Area;\n};\n\nexport interface IIndexable<T = any> { [key: string]: T; }\n\nexport type Options = {\n    ids: boolean;\n    arrows: boolean;\n};\n\nexport { Area } from \"./area\";","import React from 'react';\nimport { Tool } from '../utilities/types';\nimport { Button } from '@material-ui/core';\nimport './ToolSelector.scss';\n\ntype ToolSelectorProps = {\n    value?: Tool;\n    onSelect?: () => void;\n    onAdd?: () => void;\n    onSetDirections?: () => void;\n};\n\nexport default function ToolSelector({ value, onSelect, onAdd, onSetDirections }: ToolSelectorProps) {\n    return (\n        <div className=\"ToolSelector\">\n            {onAdd ? <Button\n                variant={value === Tool.ADD ? \"contained\" : \"outlined\"}\n                color=\"secondary\"\n                onClick={onAdd}\n            >\n                ADD\n            </Button>\n                : \"\"}\n\n            {onSelect ? <Button\n                variant={value === Tool.SELECT ? \"contained\" : \"outlined\"}\n                color=\"secondary\"\n                onClick={onSelect}\n            >\n                SELECT\n            </Button>\n                : \"\"}\n            {onSetDirections ? <Button\n                variant={value === Tool.SET_DIRECTIONS ? \"contained\" : \"outlined\"}\n                color=\"secondary\"\n                onClick={onSetDirections}\n            >\n                DIRECTIONS\n            </Button>\n                : \"\"}\n        </div>\n    );\n}","import { Vector, Shape } from './types';\n\nexport function findPointInShapeIndex(target: Vector, shapes: Shape[]) {\n    for (let i = 0; i < shapes.length; i++) {\n        if (isPointInShape(target, shapes[i])) return i;\n    }\n    return -1;\n}\n\nexport function isPointInShape(p: Vector, s: Shape) {\n    let res = false;\n    const X = 0;\n    const Y = 1;\n    for (let i = 0; i < s.length; i++) {\n        // https://www.eecs.umich.edu/courses/eecs380/HANDOUTS/PROJ2/InsidePoly.html\n        const edge = [s[i], s[(i + 1) % s.length]];\n        if (\n            (   // is the point in the Y range of the edge?\n                edge[0][Y] <= p[Y] && edge[1][Y] >= p[Y] ||\n                edge[1][Y] <= p[Y] && edge[0][Y] >= p[Y]\n            )\n            &&\n            (   // is our point to the left the line that our edge sits on at Y = point[Y]?\n                p[X] < (edge[0][X] - edge[1][X]) * (p[Y] - edge[1][Y]) / (edge[0][Y] - edge[1][Y]) + edge[1][X]\n            )\n        ) {\n            res = !res;\n        }\n    }\n    return res;\n}\n\nexport function distancePointToPoint(a: Vector, b: Vector) {\n    // Pitagora\n    return Math.hypot(a[0] - b[0], a[1] - b[1]);\n}\n\nfunction badProjectPointToSegment(p: Vector, l: [Vector, Vector]) {\n    // WHY DID I EVEN BOTHER WITH ALL OF THIS MATH\n    const [x, y] = [p[0], p[1]];\n    const [x1, y1] = [l[0][0], l[0][1]];\n    const [x2, y2] = [l[1][0], l[1][1]];\n\n    // find m and q of the segment line\n    const m = (y1 - y2) / (x1 - x2);\n    const q = (x1 * y2 - x2 * y1) / (x1 - x2);\n\n    // find m and q of the projection line\n    const mproj = -1 / m;\n    const qproj = y - mproj * x;\n\n    // solve the system and find the point that sits on both lines\n    const xproj = (qproj - q) / (m - mproj);\n    const yproj = m * xproj + q;\n\n    const proj = [xproj, yproj] as Vector;\n\n    if (\n        proj[0] > l[0][0] && proj[0] > l[1][0] || // too far left\n        proj[0] < l[0][0] && proj[0] < l[1][0] || // too far right\n        proj[1] > l[0][1] && proj[1] > l[1][1] || // too far up\n        proj[1] < l[0][1] && proj[1] < l[1][1]    // too far down\n    ) {\n        return null;\n    }\n    return proj;\n}\n\nexport function projectPointToSegment(p: Vector, l: [Vector, Vector]): Vector | null {\n    // WHY DO I ONLY THINK OF VECTORS IN MY FREE TIME AND NOT WHEN I'M ON THE CLOCK??????\n    const lineVec = vecSub(l[1], l[0]);\n    const lineLen = distancePointToPoint(l[0], l[1]);\n    const lineVecNormalized = vecScale(lineVec, 1 / lineLen);\n    const pointProjLen = dot(vecSub(p, l[0]), lineVecNormalized);\n    if (pointProjLen < 0 || pointProjLen > lineLen) return null; // proj outside the segment\n    const pointProj = vecSum(l[0], vecScale(lineVecNormalized, pointProjLen));\n    return pointProj;\n}\n\nexport function dot(vec1: Vector, vec2: Vector) {\n    return vec1[0] * vec2[0] + vec1[1] * vec2[1];\n}\n\nexport function vecSum(v1: Vector, v2: Vector): Vector {\n    return [v1[0] + v2[0], v1[1] + v2[1]];\n}\n\nexport function vecNegative(v: Vector): Vector {\n    return [-v[0], -v[1]];\n}\n\nexport function vecSub(v1: Vector, v2: Vector): Vector {\n    return vecSum(v1, vecNegative(v2));\n}\n\nexport function vecScale(v: Vector, n: number): Vector {\n    return [v[0] * n, v[1] * n];\n}\n\nexport function vecLen(v: Vector): number {\n    return distancePointToPoint([0, 0], v);\n}\n\nexport function vecFromCoordinateSystem(v: Vector, up: Vector, right: Vector): Vector {\n    return vecSum(vecScale(right, v[0]), vecScale(up, v[1]));\n}\n\nexport function vecToCoordinateSystem(v: Vector, up: Vector, right: Vector): Vector {\n    /* \n        x1 = rx * x + ux * y \n        y1 = ry * x + uy * y\n\n        x = (x1 - ux * y) / rx = (y1 - uy * y) / ry => \n        x1 * ry - ux * ry * y = y1 * rx - uy * rx * y =>\n        y = (x1 * ry - y1 * rx) / (ux * ry - uy * rx)\n     */\n    const y = (v[0] * right[1] - v[1] * right[0]) / (up[0] * right[1] - up[1] * right[0]);\n    const x = (v[0] - up[0] * y) / right[0];\n    return [x, y];\n}\n\nexport function vecRotate(v: Vector, upRotated: Vector): Vector {\n    const up = vecScale(upRotated, 1 / vecLen(upRotated));\n    const right = [up[1], -up[0]] as Vector;\n    return vecFromCoordinateSystem(v, up, right);\n}\n\nexport function centroidOfShape(shape: Shape) {\n    const sum = shape.reduce((res, v) => vecSum(v, res));\n    return vecScale(sum, 1 / shape.length);\n}\n\nexport function dirShapeToShape(s1: Shape, s2: Shape) {\n    const center1 = centroidOfShape(s1);\n    const center2 = centroidOfShape(s2);\n    const lineC1toC2 = vecSub(center2, center1);\n    const distance = distancePointToPoint([0, 0], lineC1toC2);\n    return vecScale(lineC1toC2, 1 / distance);\n}","import React, { useRef, useState, useEffect } from 'react';\nimport './Canvas.scss';\nimport { Area, Vector, Shape, Tool, DirKeys, Options } from '../utilities/types';\nimport { distancePointToPoint, projectPointToSegment, findPointInShapeIndex, vecSum, vecScale, vecFromCoordinateSystem, isPointInShape, vecRotate, vecSub, vecToCoordinateSystem, centroidOfShape, vecNegative } from '../utilities/shapes';\nimport { order } from '../utilities/data';\n\nconst CANVAS_W = 1920;\nconst CANVAS_H = 1080;\nconst POINT_RADIUS = 5;\nconst SNAP_DISTANCE = 25;\n// const ARROW_SCALE = .1;\nconst ARROW_SIZE = 16;\nconst ID_SIZE = 48;\n\nconst alpha = .25;\n\nconst style1 = {\n    width: 2,\n    stroke: `rgb(250, 50, 50)`,\n    fill: `rgba(250, 50, 50, ${alpha})`,\n    arrow: `rgba(250, 50, 50, ${alpha * 2})`,\n    selected: {\n        width: 2,\n        stroke: `rgb(255, 200, 50)`,\n        fill: `rgba(255, 200, 50, ${alpha})`,\n        arrow: `rgba(255, 200, 50, ${alpha * 2})`,\n    },\n};\n\nconst style2 = {\n    width: 2,\n    stroke: `rgb(50, 50, 250)`,\n    fill: `rgba(50, 50, 250, ${alpha})`,\n    arrow: `rgba(50, 50, 250, ${alpha * 2})`,\n    selected: {\n        width: 2,\n        stroke: `rgb(50, 250, 250)`,\n        fill: `rgba(50, 250, 250, ${alpha})`,\n        arrow: `rgba(50, 250, 250, ${alpha * 2})`,\n    },\n};\n\nexport interface CanvasProps {\n    img: CanvasImageSource | null;\n    quads: Area[];\n    newQuad: (quad: Area) => void;\n    tool: Tool;\n    setSelected: (index: number) => void;\n    updateQuads: (arr: Area[]) => void;\n    deleteQuads: (arr: Area[]) => void;\n    slider?: number;\n    width?: number;\n    height?: number;\n    options?: Options;\n};\n\nexport default function Canvas({\n    img, quads, newQuad, tool, setSelected, updateQuads, deleteQuads, slider, width, height, options = { ids: true, arrows: true }\n}: CanvasProps) {\n\n    const [points, setPoints] = useState<Shape>([]);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const [modifier, setModifier] = useState<boolean>(false);\n    const [oldMouse, setOldMouse] = useState<Vector | null>(null);\n    const [dragIndexes, setDragIndexes] = useState<number[] | null>(null);\n\n    const ref = useRef<HTMLCanvasElement>(null);\n    const [mouse, setMouse] = useState<{ x: number, y: number; }>({ x: 0, y: 0 });\n\n    let canvasH = CANVAS_H;\n    let canvasW = CANVAS_W;\n\n    useEffect(() => {\n        const canvas = ref.current;\n        const context = canvas?.getContext('2d');\n        if (!canvas || !context) {\n            return;\n        }\n\n        canvasH = canvas.height;\n        canvasW = canvas.width;\n\n        // Background\n        try {\n            if (!img) throw Error;\n            context.drawImage(img, 0, 0, canvas.width, canvas.height);\n        } catch (e) {\n            context.fillStyle = '#fff';\n            context.fillRect(0, 0, canvas.width, canvas.height);\n        }\n\n        // Finished Quads\n        for (const quad of quads) {\n            drawArea(context, quad);\n        }\n\n        if (mouse.x && mouse.y) {\n\n            // New Quad\n            if (points && tool === Tool.ADD) {\n                let close = false;\n                const pos = snapToShapes([mouse.x, mouse.y], quads.map(a => a.shape));\n                let path = [pos, ...points];\n                if (points.length === 3) {\n                    close = true;\n                }\n                context.lineWidth = style1.width;\n                context.strokeStyle = style1.stroke;\n                context.fillStyle = style1.fill;\n                drawPath(context, path, true, close);\n            }\n\n\n        }\n    }, [img, quads, tool, mouse, modifier, points, slider, width, options]);\n\n    const snapToShapes = (pos: Vector, shapes: Shape[]) => {\n        if (modifier) return pos;\n\n        // give priority to points instead of edges\n        // find the closest point\n        shapes.push([[0, 0], [canvasW, 0], [canvasW, canvasH], [0, canvasH]]); // add boundaries\n        let [minDist, newPoint] = shapes.flat().reduce(([dist, point]: [number, Vector | null], p) => {\n            const d = distancePointToPoint(pos, p);\n            if (d < dist || dist === -1) return [d, p];\n            else return [dist, point];\n        }, [-1, null]);\n\n        if (newPoint && minDist < SNAP_DISTANCE) {\n            pos = newPoint;\n        } else {\n            [minDist, newPoint] = shapes.reduce(([dist, point]: [number, Vector | null], s) => {\n                // find the closest point in the edges\n                let [d, p] = s.reduce(([dist, point]: [number, Vector | null], p1, i, s) => {\n\n                    const p2 = s[(i + 1) % s.length];\n                    let proj = projectPointToSegment(pos, [p1, p2]);\n                    let d, p;\n                    // if we found a projection it is the closest point\n                    if (proj) {\n                        d = distancePointToPoint(pos, proj);\n                        p = proj;\n                        // confront it with the previous results\n                        if (d < dist || dist === -1) return [d, p];\n                    }\n                    return [dist, point];\n                }, [-1, null]);\n\n                // confront it with the previous results\n                if (p && d < dist || dist === -1) return [d, p];\n                return [dist, point];\n            }, [-1, null]);\n\n            if (newPoint && minDist < SNAP_DISTANCE) {\n                pos = newPoint;\n            }\n        }\n\n        return pos;\n    };\n\n    const addPoint = () => {\n        if (!mouse.x || !mouse.y) {\n            return;\n        }\n\n        let pos: Vector = [mouse.x, mouse.y];\n\n        pos = snapToShapes(pos, quads.map(a => a.shape));\n\n        const updatedShape = [pos, ...points];\n\n        if (updatedShape.length === 4) {\n            const newArea = new Area(order(updatedShape));\n            newArea.isSelected = true;\n            setSelected(-1);\n            newQuad(newArea);\n            setPoints([]);\n        } else {\n            setPoints(updatedShape);\n        }\n    };\n\n    const drawPath = (canvasCtx: CanvasRenderingContext2D, points: [number, number][], f_drawPoints = false, close = true) => {\n        if (points[0])\n            canvasCtx.moveTo(points[0][0], points[0][1]);\n        canvasCtx.beginPath();\n        for (const p of points) {\n            canvasCtx.lineTo(p[0], p[1]);\n        }\n\n        if (close) {\n            canvasCtx.closePath();\n            canvasCtx.fill();\n        }\n        canvasCtx.stroke();\n\n        if (f_drawPoints) {\n            for (const p of points)\n                drawPoint(canvasCtx, p);\n        }\n    };\n\n    const drawPoint = (canvasCtx: CanvasRenderingContext2D, point: Vector) => {\n        const tmpFill = canvasCtx.fillStyle;\n        const tmpStroke = canvasCtx.strokeStyle;\n        canvasCtx.fillStyle = \"#5f5\";\n        canvasCtx.strokeStyle = \"#000\";\n        canvasCtx.beginPath();\n        canvasCtx.arc(point[0], point[1], POINT_RADIUS, 0, 2 * 3.15);\n        canvasCtx.closePath();\n        canvasCtx.fill();\n        canvasCtx.stroke();\n        canvasCtx.fillStyle = tmpFill;\n        canvasCtx.strokeStyle = tmpStroke;\n    };\n\n    const drawParking = (canvasCtx: CanvasRenderingContext2D, quad: Vector[], color = \"#000\") => {\n\n        if (quad.length !== 4) return;\n\n        const tmpStroke = canvasCtx.strokeStyle;\n        const tmpWidth = canvasCtx.lineWidth;\n        canvasCtx.strokeStyle = color;\n        canvasCtx.lineWidth = 3;\n\n        drawPath(canvasCtx, [quad[0], quad[2]], false, false);\n        drawPath(canvasCtx, [quad[1], quad[3]], false, false);\n\n        canvasCtx.strokeStyle = tmpStroke;\n        canvasCtx.lineWidth = tmpWidth;\n    };\n\n    const drawArrows = (\n        canvasCtx: CanvasRenderingContext2D,\n        quad: Vector[],\n        directions: { left: boolean, up: boolean, right: boolean, down: boolean; },\n        color = \"#000\",\n        f_close = false\n    ) => {\n\n        let arrow: Shape = [[-.7, -1], [0, 1], [.7, -1]];\n        arrow = arrow.map(vec => vecScale(vec, ARROW_SIZE));\n\n        const topMid = centroidOfShape([quad[0], quad[1]]);\n        const botMid = centroidOfShape([quad[2], quad[3]]);\n        const rightMid = centroidOfShape([quad[1], quad[2]]);\n        const leftMid = centroidOfShape([quad[3], quad[0]]);\n\n        const up = vecSub(topMid, botMid);\n        const right = vecSub(rightMid, leftMid);\n\n        const arrows = Object.entries(directions).map(([k, v]) => {\n            if (!v) return null;\n            let dir: Vector, anchor: Vector;\n            switch (k) {\n                case \"up\":\n                    dir = up;\n                    anchor = topMid;\n                    break;\n                case \"down\":\n                    dir = vecNegative(up);\n                    anchor = botMid;\n                    break;\n                case \"right\":\n                    dir = right;\n                    anchor = rightMid;\n                    break;\n                case \"left\":\n                    dir = vecNegative(right);\n                    anchor = leftMid;\n                    break;\n                default:\n                    return null;\n            }\n\n            const rotated = arrow.map(vec => vecRotate(vec, dir));\n            const translation = vecSub(anchor, rotated[1]);\n            return rotated.map(vec => vecSum(vec, translation));\n        });\n\n        const tmpStroke = canvasCtx.strokeStyle;\n        const tmpFill = canvasCtx.fillStyle;\n        const tmpWidth = canvasCtx.lineWidth;\n\n        if (f_close) canvasCtx.strokeStyle = \"#000\";\n        else canvasCtx.strokeStyle = color;\n\n        canvasCtx.fillStyle = color;\n        canvasCtx.lineWidth = 2;\n\n        for (const arrow of arrows) {\n            if (!arrow) continue;\n            drawPath(canvasCtx, arrow, false, f_close);\n        }\n\n        canvasCtx.strokeStyle = tmpStroke;\n        canvasCtx.fillStyle = tmpFill;\n        canvasCtx.lineWidth = tmpWidth;\n    };\n\n    const drawArea = (canvasCtx: CanvasRenderingContext2D, area: Area) => {\n        let movement: Vector = [0, 0];\n        // Drag\n        if (dragging && oldMouse) {\n            movement = [mouse.x! - oldMouse[0], mouse.y! - oldMouse[1]] as Vector;\n        }\n\n        const shape = area.isSelected\n            ? area.shape.map((p, i) => {\n                if (dragIndexes && dragIndexes.some(n => n === i))\n                    return snapToShapes(vecSum(p, movement), quads.filter(a => a.id !== area.id).map(a => a.shape));\n                else return p;\n            })\n            : area.shape;\n\n        const center = centroidOfShape(shape);\n\n        let style;\n        if (area.isCarWalkable) {\n            style = style1;\n        } else {\n            style = style2;\n        }\n        if (area.isSelected)\n            style = style.selected;\n\n\n        const tmp = {\n            lw: canvasCtx.lineWidth,\n            ss: canvasCtx.strokeStyle,\n            fs: canvasCtx.fillStyle,\n        };\n        canvasCtx.lineWidth = style.width;\n        canvasCtx.strokeStyle = style.stroke;\n        canvasCtx.fillStyle = style.fill;\n\n        drawPath(canvasCtx, shape, area.isSelected, true);\n        if (options.ids) drawText(canvasCtx, area.id.toString(), center, ID_SIZE, style.stroke);\n\n        if (tool === Tool.SET_DIRECTIONS) drawArrows(canvasCtx, shape, area.direction, \"#3e3\", true);\n        else if (options.arrows) drawArrows(canvasCtx, shape, area.direction, style.stroke);\n\n        if (area.isParking) drawParking(canvasCtx, shape, style.stroke);\n\n        canvasCtx.lineWidth = tmp.lw;\n        canvasCtx.strokeStyle = tmp.ss;\n        canvasCtx.fillStyle = tmp.fs;\n    };\n\n    const drawText = (canvasCtx: CanvasRenderingContext2D, text: string, center: Vector, size = 12, color = \"#000\") => {\n        const tmp = {\n            font: canvasCtx.font,\n            ta: canvasCtx.textAlign,\n            tb: canvasCtx.textBaseline,\n            fs: canvasCtx.fillStyle,\n        };\n\n        canvasCtx.font = `${size}px sans-serif`;\n        canvasCtx.textAlign = \"center\";\n        canvasCtx.textBaseline = \"middle\";\n        canvasCtx.fillStyle = color;\n\n        canvasCtx.fillText(text, center[0], center[1]);\n\n        canvasCtx.font = tmp.font;\n        canvasCtx.textAlign = tmp.ta;\n        canvasCtx.textBaseline = tmp.tb;\n        canvasCtx.fillStyle = tmp.fs;\n    };\n\n    const handleSelect = () => {\n        // check if we have a selected area\n        const selected = quads.find(a => a.isSelected);\n        let indexes: number[] | null = null;\n        if (selected) {\n            // check its closest points and edges to drag them\n            const points = selected.shape;\n            let distance: number;\n            indexes = [-1];\n            // find the closest point to the mouse pointer\n            [distance, indexes[0]] = points.reduce(([res_d, res_i], p, i) => {\n                const d = distancePointToPoint([mouse.x!, mouse.y!], p);\n                return d < res_d ? [d, i] : [res_d, res_i];\n            }, [999, -1]);\n            // if it's too far check if one of the edges is close enough\n            if (distance > SNAP_DISTANCE) {\n                [distance, indexes] = points.reduce(([res_d, res_is], p, i, points) => {\n                    const j = (i + 1) % points.length;\n                    const p1 = points[j];\n                    const proj = projectPointToSegment([mouse.x!, mouse.y!], [p, p1]);\n                    if (!proj) return [res_d, res_is];\n                    const dist = distancePointToPoint([mouse.x!, mouse.y!], proj);\n                    return dist < res_d ? [dist, [i, j]] : [res_d, res_is];\n                }, [999, [-1]]);\n            }\n            // if it's not check if we clicked it and drag the entire shape\n            if (distance > SNAP_DISTANCE) {\n                if (isPointInShape([mouse.x, mouse.y], selected.shape)) {\n                    indexes = [0, 1, 2, 3];\n                } else {\n                    indexes = null;\n                }\n            }\n        }\n\n        if (indexes) {\n            // update the state\n            setDragIndexes(indexes);\n            setDragging(true);\n            setOldMouse([mouse.x!, mouse.y!]);\n        } else {\n            // check if we clicked an area and select it\n            const target = findPointInShapeIndex([mouse.x, mouse.y], quads.map(a => a.shape));\n            setSelected(target);\n        }\n    };\n\n    const handleSetDirections = () => {\n        const pos = [mouse.x, mouse.y] as Vector;\n        const targetArea = quads.find(q => isPointInShape(pos, q.shape));\n        if (!targetArea) return;\n\n        const shape = targetArea.shape;\n        const center = centroidOfShape(shape);\n        const sectors = {\n            up: [shape[0], shape[1], center] as Shape,\n            down: [shape[2], shape[3], center] as Shape,\n            right: [shape[1], shape[2], center] as Shape,\n            left: [shape[3], shape[0], center] as Shape,\n        };\n\n        const selectedDir: DirKeys | null = (() => {\n            for (const [k, v] of Object.entries(sectors)) {\n                if (isPointInShape(pos, v)) return k as DirKeys;\n            }\n            return null;\n        })();\n\n        if (!selectedDir) return;\n\n        targetArea.direction[selectedDir] = !targetArea.direction[selectedDir];\n\n        updateQuads([targetArea]);\n    };\n\n    const onMouseDown = () => {\n        switch (tool) {\n            case Tool.ADD:\n                addPoint();\n                break;\n            case Tool.SELECT:\n                handleSelect();\n                break;\n            case Tool.SET_DIRECTIONS:\n                handleSetDirections();\n                break;\n            default:\n                throw Error(\"Tool not implemented\");\n        }\n    };\n\n    const stopDragging = () => {\n        if (dragging && oldMouse) {\n            const selectedAreas = quads.filter(a => a.isSelected);\n            const movement: Vector = [mouse.x! - oldMouse[0], mouse.y! - oldMouse[1]];\n            const updated = selectedAreas.map(a => {\n                a.shape = a.shape.map((p, i) => {\n                    if (dragIndexes && dragIndexes.some(n => n === i))\n                        return snapToShapes(vecSum(p, movement), quads.filter(b => b.id !== a.id).map(b => b.shape));\n                    else return p;\n                });\n                return a;\n            });\n            updateQuads(updated);\n            setDragging(false);\n            setDragIndexes(null);\n            setOldMouse(null);\n        }\n    };\n\n    const onMouseUp = () => {\n        stopDragging();\n    };\n\n    const onMouseLeave = () => {\n        setPoints([]);\n        if (dragging && dragIndexes?.length === 4) {\n            setDragging(false);\n            setDragIndexes(null);\n            setOldMouse(null);\n            deleteQuads(quads.filter(q => q.isSelected));\n        }\n        else {\n            stopDragging();\n        }\n    };\n    const onMouseMove = (e: React.MouseEvent) => {\n        const canvas = ref.current;\n        if (canvas) {\n            const ratio = canvas.clientWidth / canvas.width;\n            const topLeft = [canvas.offsetLeft, canvas.offsetTop];\n            setMouse({\n                x: (e.pageX - topLeft[0]) / ratio,\n                y: (e.pageY - topLeft[1]) / ratio,\n            });\n        }\n    };\n\n    return (\n        <div className=\"Canvas\">\n            <canvas\n                ref={ref}\n                onMouseDown={onMouseDown}\n                onMouseUp={onMouseUp}\n                onMouseLeave={onMouseLeave}\n                onMouseMove={e => onMouseMove(e)}\n                width={width ?? CANVAS_W}\n                height={height ?? CANVAS_H}\n                onKeyDown={e => { if (e.key === \"Control\") setModifier(true); }}\n                onKeyUp={e => { if (e.key === \"Control\") setModifier(false); }}\n                tabIndex={0}\n            />\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { Clear, Check, CheckBoxOutlined, Delete } from '@material-ui/icons';\nimport { order } from '../utilities/data';\nimport { dot, vecSum } from '../utilities/shapes';\nimport { Area, AreaDictionary, IIndexable, Vector } from '../utilities/types';\n\nimport './Inspector.scss';\n\ntype InspectorProps = {\n    target: Area[];\n    update: (updated: Area[]) => void;\n    selectById: (id: number) => void;\n    deleteById: (id: number) => void;\n};\n\nexport default function Inspector({ target, update, selectById, deleteById }: InspectorProps) {\n\n    const [inspected, setInspected] = useState<AreaDictionary[]>();\n    const updateInspected = (updated: AreaDictionary, changed = true) => {\n        updated.changed = changed;\n        if (!inspected) return;\n        const unchanged = inspected?.filter(a => a.id !== updated.id);\n        setInspected([updated, ...unchanged].sort((a, b) => a.id < b.id ? -1 : 1));\n    };\n\n    useEffect(() => {\n\n        const selected = target;\n\n        // let selected: Area[] = target.filter(a => a.isSelected);\n        // if (selected.length === 0)\n        //     selected = target;\n\n        let list = selected.map(a => a.toAreaDictionary());\n\n        const pending = inspected?.filter(t => t.changed);\n        list = list.map(a => {\n            const t = pending?.find(t => t.id === a.id);\n            return t ? t : a;\n        });\n\n        list = list.sort((a, b) => a.id < b.id ? -1 : 1);\n\n        setInspected(list);\n    }, [target]);\n\n\n    function renderAD(a: AreaDictionary) {\n\n        const renderPoint = (p: Vector, key: string, ref: AreaDictionary) => {\n            return p.map((val, i) => {\n                return (\n                    <td key={`${key}${i}`}>\n                        <input\n                            type=\"number\"\n                            value={Math.round(val)}\n                            onChange={e => {\n                                (ref.points as IIndexable)[key][i] = +e.target.value;\n                                updateInspected(ref);\n                            }}\n                        />\n                    </td>\n                );\n            });\n        };\n\n        const renderedPoints = Object.entries(a.points)\n            .flatMap(([k, v]) => renderPoint(v, k, a));\n\n        const renderedDirection = Object.entries(a.dir)\n            .map(([k, v]) => {\n                return (\n                    <td key={k}>\n                        <input type=\"checkbox\"\n                            checked={v}\n                            onChange={() => {\n                                (a.dir as IIndexable)[k] = !(a.dir as IIndexable)[k];\n                                updateInspected(a);\n                            }}\n                        />\n                    </td>\n                );\n            });\n\n        return (\n            <tr key={a.id} onClick={() => selectById(a.id)} className={a.ref?.isSelected ? \"selected\" : \"\"}>\n                <td key=\"delete\" className=\"delete\">\n                    <Button variant=\"contained\" color=\"secondary\"\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            deleteById(a.id);\n                        }}\n                    >\n                        <Delete />\n                    </Button>\n                </td>\n                <td key=\"id\">\n                    <div className=\"id\"> {a.id} </div>\n                </td>\n                {renderedPoints}\n                <td key=\"iscarwalkable\">\n                    <input type=\"checkbox\"\n                        checked={a.carWalk}\n                        onChange={() => {\n                            a.carWalk = !a.carWalk;\n                            updateInspected(a);\n                        }}\n                    />\n                </td>\n                {renderedDirection}\n                <td key=\"isparking\">\n                    <input type=\"checkbox\"\n                        checked={a.parking}\n                        onChange={() => {\n                            a.parking = !a.parking;\n                            updateInspected(a);\n                        }}\n                    />\n                </td>\n                <td key=\"isstop\">\n                    <input\n                        type=\"text\"\n                        value={a.stop ?? \"None\"}\n                        onChange={e => {\n                            a.stop = e.target.value;\n                            updateInspected(a);\n                        }}\n                    />\n                </td>\n                <td className={!a.changed ? \"hide\" : \"space\"} />\n                <td key=\"update\" className={!a.changed ? \"hide\" : \"\"}>\n                    <Button variant=\"contained\" color=\"primary\"\n\n                        onClick={() => {\n                            updateInspected(a, false);\n                            update([\n                                target.find(t => t.id === a.id)!.fromAreaDictionary(a)\n                            ]);\n                        }}\n                    >\n                        <Check />\n                    </Button>\n                </td>\n                <td key=\"discard\" className={!a.changed ? \"hide\" : \"\"}>\n                    <Button variant=\"contained\" color=\"secondary\"\n                        className={!a.changed ? \"hide\" : \"\"}\n                        onClick={() => {\n                            a = target.find(t => t.id === a.id)!.toAreaDictionary();\n                            updateInspected(a, false);\n                        }}\n                    >\n                        <Clear />\n                    </Button>\n                </td>\n            </tr>\n        );\n    }\n\n    return (\n        <div className=\"Inspector\">\n            <table>\n                <thead>\n                    <tr>\n                        <th />\n                        <th>ID      </th>\n                        <th>luX     </th>\n                        <th>luY     </th>\n                        <th>ruX     </th>\n                        <th>ruY     </th>\n                        <th>rbX     </th>\n                        <th>rbY     </th>\n                        <th>lbX     </th>\n                        <th>lbY     </th>\n                        <th>CarWalk </th>\n                        <th>Left    </th>\n                        <th>Up      </th>\n                        <th>Right   </th>\n                        <th>Down    </th>\n                        <th>Parking </th>\n                        <th>Stop    </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        inspected?.map((a) => renderAD(a))\n                    }\n                </tbody>\n            </table>\n        </div>\n    );\n\n}","import React, { useRef } from 'react';\nimport { Button } from '@material-ui/core';\nimport { Area, AreaDictionary, Vector } from '../utilities/types';\n\nimport './IOManager.css';\n\nconst fields = [\n    \"luX\",\n    \"luY\",\n    \"ruX\",\n    \"ruY\",\n    \"rbX\",\n    \"rbY\",\n    \"lbX\",\n    \"lbY\",\n    \"CarWalk\",\n    \"Left\",\n    \"Up\",\n    \"Right\",\n    \"Down\",\n    \"Parking\",\n    \"Stop\",\n];\n\ntype IOMangerProps = {\n    target: Area[];\n    source?: string;\n    load: (arr: Area[]) => void;\n};\n\nexport function IOManager({ target, source, load }: IOMangerProps) {\n    const dlRef = useRef<HTMLAnchorElement>(null);\n    const loadRef = useRef<HTMLInputElement>(null);\n\n    const filename = source ? source.replace(\".mp4\", \"_areas.csv\") : \"areas.csv\";\n\n    const download = () => {\n        const outStr = formatData(target);\n        const blob = new Blob([outStr], { type: 'text/csv;charset=utf-8;' });\n        const dlUrl = URL.createObjectURL(blob);\n        dlRef.current?.setAttribute(\"href\", dlUrl);\n        dlRef.current?.click();\n        URL.revokeObjectURL(dlUrl);\n    };\n\n    const formatData = (target: Area[]) => {\n        const formatted = target.map(formatArea);\n        return [fields.join(',')].concat(formatted).join('\\n');\n    };\n\n    const formatArea = (area: Area) => {\n        const ad = area.toAreaDictionary();\n\n        const points = [ad.points.lu, ad.points.ru, ad.points.rb, ad.points.lb].map(p => p.join(',')).join(',');\n        const carWalk = ad.carWalk ? 1 : 0;\n        const parking = ad.parking ? 1 : 0;\n        const stop = ad.stop;\n        const direction = [ad.dir.left, ad.dir.up, ad.dir.right, ad.dir.down].map(f => f ? 1 : 0).join(',');\n\n        return [points, carWalk, direction, parking, stop].join(',');\n    };\n\n    const loader = async (f: File | null) => {\n        if (!f) {\n            console.error(\"Unable to load file!\");\n            return;\n        }\n        const csv = await f.text();\n        const rows = csv.split('\\n').filter(s => s !== \"\");\n        const strings = rows.slice(1).map(r => r.split(','));\n        const dictionaries = strings.map(r => {\n            let ad: any = { points: {}, dir: {} };\n            const vals: number[] = r.map(v => +v);\n            ad.points.lu = vals.slice(0, 2) as Vector;\n            ad.points.ru = vals.slice(2, 4) as Vector;\n            ad.points.rb = vals.slice(4, 6) as Vector;\n            ad.points.lb = vals.slice(6, 8) as Vector;\n            ad.carWalk = vals[8] > 0;\n            ad.dir.left = vals[9] > 0;\n            ad.dir.up = vals[10] > 0;\n            ad.dir.right = vals[11] > 0;\n            ad.dir.down = vals[12] > 0;\n            ad.parking = vals[13] > 0;\n            ad.stop = r[14];\n            return ad as AreaDictionary;\n        });\n        const newAreas = dictionaries.map(ad => new Area().fromAreaDictionary(ad));\n        load(newAreas);\n    };\n\n    return (\n        <div className=\"IOManager\">\n            <Button variant=\"contained\" color=\"primary\"\n                onClick={() => loadRef.current?.click()}\n            >\n                Load CSV\n            </Button>\n            <input hidden\n                type=\"file\"\n                ref={loadRef}\n                accept=\".csv\"\n                onChange={() => loader(loadRef.current?.files?.item(0) ?? null)}\n            />\n\n            <Button variant=\"contained\" color=\"primary\"\n                onClick={download}\n            >\n                Download\n            </Button>\n            <a\n                ref={dlRef}\n                download={filename}\n                hidden\n            />\n        </div >\n    );\n}","import React from 'react';\nimport { Options } from '../utilities/types';\nimport { Button } from '@material-ui/core';\nimport './OptionSelector.scss';\nimport { ArrowUpward } from '@material-ui/icons';\n\ntype OptionSelectorProps = {\n    options: Options;\n    updateOptions: (o: Options) => void;\n};\n\nexport default function OptionSelector({ options, updateOptions }: OptionSelectorProps) {\n    return (\n        <div className=\"OptionSelector\">\n            <Button\n                variant={options.ids ? \"contained\" : \"outlined\"}\n                onClick={() => updateOptions({ ...options, ids: !options.ids })}\n            >\n                IDs\n            </Button>\n\n            <Button\n                variant={options.arrows ? \"contained\" : \"outlined\"}\n                onClick={() => updateOptions({ ...options, arrows: !options.arrows })}\n            >\n                <ArrowUpward />\n            </Button>\n        </div>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Video from './components/Video';\nimport FilePicker from './components/FilePicker';\nimport { Area, Tool, Options } from './utilities/types';\nimport ToolSelector from './components/ToolSelector';\nimport Canvas from './components/Canvas';\nimport Inspector from './components/Inspector';\nimport { IOManager } from './components/IOManager';\nimport OptionSelector from './components/OptionSelector';\n\n\nexport default function App() {\n\n    const [file, setFile] = useState<File | null>(null);\n    const [videoSrc, setVideoSrc] = useState<string>(\"\");\n    const [video, setVideo] = useState<HTMLVideoElement | null>(null);\n    const [slider, setSlider] = useState<number | undefined>();\n    const [quadList, setQuadList] = useState<Area[]>([]);\n    const [tool, setTool] = useState<Tool>(Tool.ADD);\n    const [options, setOptions] = useState<Options>({ ids: true, arrows: true, });\n\n    useEffect(() => {\n        if (file) {\n            const source = URL.createObjectURL(file);\n            setVideoSrc(source);\n        }\n    }, [file]);\n\n    const deleteQuads = (quads: Area[]) => {\n        const filteredList = quadList.filter(a => quads.every(b => b.id !== a.id));\n        setQuadList(filteredList);\n    };\n\n    const setSelected = (index: number) => {\n        quadList.map(a => a.isSelected = false);\n        if (index >= 0 && index < quadList.length) {\n            quadList[index].isSelected = true;\n        }\n        setQuadList([...quadList]);\n    };\n\n    const setSelectedById = (id: number) => {\n        setSelected(quadList.findIndex(a => a.id === id));\n    };\n\n    const updateQuads = (quads: Area[]) => {\n        const notUpdated = quadList.filter(a => quads.every(b => b.id !== a.id));\n        setQuadList([...quads, ...notUpdated]);\n    };\n\n    return (\n        <div className=\"App\">\n            <div>\n                <div className=\"BlockButtons\">\n                    <OptionSelector\n                        options={options}\n                        updateOptions={setOptions}\n                    />\n                </div>\n                <div className=\"BlockCanvas\">\n                    <Canvas\n                        img={video}\n                        quads={quadList}\n                        newQuad={(quad: Area) => setQuadList([quad, ...quadList])}\n                        tool={tool}\n                        setSelected={setSelected}\n                        updateQuads={updateQuads}\n                        deleteQuads={deleteQuads}\n                        slider={slider}\n                        width={video?.videoWidth || undefined}\n                        height={video?.videoHeight || undefined}\n                        options={options}\n                    />\n                    <Video\n                        source={videoSrc}\n                        setVideo={setVideo}\n                        setSlider={setSlider}\n                        value={slider ?? 0}\n                    />\n                </div>\n                <div className=\"BlockButtons\">\n                    <ToolSelector\n                        value={tool}\n                        onAdd={() => { setTool(Tool.ADD); setSelected(-1); }}\n                        onSelect={() => { setTool(Tool.SELECT); setSelected(-1); }}\n                        onSetDirections={() => { setTool(Tool.SET_DIRECTIONS); setSelected(-1); }}\n                    />\n                    <FilePicker setFile={setFile} accept_types=\"video/*\" />\n                    <IOManager\n                        target={quadList}\n                        source={file?.name}\n                        load={arr => setQuadList(arr)}\n                    />\n                </div>\n            </div>\n            <div>\n                <Inspector\n                    target={quadList}\n                    update={updateQuads}\n                    selectById={setSelectedById}\n                    deleteById={(id) => deleteQuads(quadList.filter(q => q.id === id))}\n                />\n            </div>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { blue, red } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: blue[400],\n    },\n    secondary: {\n      main: red[400],\n    },\n  },\n  typography: {\n    button: {\n      fontWeight: \"bold\",\n    },\n  },\n  overrides: {\n    MuiButton: {\n      outlined: {\n        border: \"2px solid !important\",\n      }\n    }\n  }\n\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}